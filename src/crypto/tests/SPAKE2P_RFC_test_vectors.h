/*
 *
 *    Copyright (c) 2020 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 * @file - This file contains Spake2+ RFC test vectors.
 */

#pragma once

namespace chip {
namespace Crypto {

struct spake2p_rfc_tv
{
    const uint8_t * context;
    size_t context_len;
    const uint8_t * prover_identity;
    size_t prover_identity_len;
    const uint8_t * verifier_identity;
    size_t verifier_identity_len;
    const uint8_t * w0;
    size_t w0_len;
    const uint8_t * w1;
    size_t w1_len;
    const uint8_t * L;
    size_t L_len;
    const uint8_t * x;
    size_t x_len;
    const uint8_t * X;
    size_t X_len;
    const uint8_t * y;
    size_t y_len;
    const uint8_t * Y;
    size_t Y_len;
    const uint8_t * Z;
    size_t Z_len;
    const uint8_t * V;
    size_t V_len;
    const uint8_t * K_main;
    size_t K_main_len;
    const uint8_t * K_confirmP;
    size_t K_confirmP_len;
    const uint8_t * K_confirmV;
    size_t K_confirmV_len;
    const uint8_t * K_shared;
    size_t * K_shared_len;
    const uint8_t * MAC_confirmP;
    size_t MAC_confirmP_len;
    const uint8_t * MAC_confirmV;
    size_t MAC_confirmV_len;
};

static const uint8_t chiptest_e4836c3b50dd_w0_1[]  = {0xbb, 0x8e, 0x1b, 0xbc, 0xf3, 0xc4, 0x8f, 0x62, 0xc0, 0x8d, 0xb2, 0x43, 0x65, 0x2a, 0xe5, 0x5d, 0x3e, 0x55, 0x86, 0x05, 0x3f, 0xca, 0x77, 0x10, 0x29, 0x94, 0xf2, 0x3a, 0xd9, 0x54, 0x91, 0xb3};
static const uint8_t chiptest_e4836c3b50dd_w1_2[]  = {0x7e, 0x94, 0x5f, 0x34, 0xd7, 0x87, 0x85, 0xb8, 0xa3, 0xef, 0x44, 0xd0, 0xdf, 0x5a, 0x1a, 0x97, 0xd6, 0xb3, 0xb4, 0x60, 0x40, 0x9a, 0x34, 0x5c, 0xa7, 0x83, 0x03, 0x87, 0xa7, 0x4b, 0x1d, 0xba};
static const uint8_t chiptest_e4836c3b50dd_L_3[]   = {0x04, 0xeb, 0x7c, 0x9d, 0xb3, 0xd9, 0xa9, 0xeb, 0x1f, 0x8a, 0xda, 0xb8, 0x1b, 0x57, 0x94, 0xc1, 0xf1, 0x3a, 0xe3, 0xe2, 0x25, 0xef, 0xbe, 0x91, 0xea, 0x48, 0x74, 0x25, 0x85, 0x4c, 0x7f, 0xc0, 0x0f, 0x00, 0xbf, 0xed, 0xcb, 0xd0, 0x9b, 0x24, 0x00, 0x14, 0x2d, 0x40, 0xa1, 0x4f, 0x20, 0x64, 0xef, 0x31, 0xdf, 0xaa, 0x90, 0x3b, 0x91, 0xd1, 0xfa, 0xea, 0x70, 0x93, 0xd8, 0x35, 0x96, 0x6e, 0xfd};
static const uint8_t chiptest_e4836c3b50dd_x_4[]   = {0xd1, 0x23, 0x2c, 0x8e, 0x86, 0x93, 0xd0, 0x23, 0x68, 0x97, 0x6c, 0x17, 0x4e, 0x20, 0x88, 0x85, 0x1b, 0x83, 0x65, 0xd0, 0xd7, 0x9a, 0x9e, 0xee, 0x70, 0x9c, 0x6a, 0x05, 0xa2, 0xfa, 0xd5, 0x39};
static const uint8_t chiptest_e4836c3b50dd_X_5[]   = {0x04, 0xef, 0x3b, 0xd0, 0x51, 0xbf, 0x78, 0xa2, 0x23, 0x4e, 0xc0, 0xdf, 0x19, 0x7f, 0x78, 0x28, 0x06, 0x0f, 0xe9, 0x85, 0x65, 0x03, 0x57, 0x9b, 0xb1, 0x73, 0x30, 0x09, 0x04, 0x2c, 0x15, 0xc0, 0xc1, 0xde, 0x12, 0x77, 0x27, 0xf4, 0x18, 0xb5, 0x96, 0x6a, 0xfa, 0xdf, 0xdd, 0x95, 0xa6, 0xe4, 0x59, 0x1d, 0x17, 0x10, 0x56, 0xb3, 0x33, 0xda, 0xb9, 0x7a, 0x79, 0xc7, 0x19, 0x3e, 0x34, 0x17, 0x27};
static const uint8_t chiptest_e4836c3b50dd_y_6[]   = {0x71, 0x7a, 0x72, 0x34, 0x8a, 0x18, 0x20, 0x85, 0x10, 0x9c, 0x8d, 0x39, 0x17, 0xd6, 0xc4, 0x3d, 0x59, 0xb2, 0x24, 0xdc, 0x6a, 0x7f, 0xc4, 0xf0, 0x48, 0x32, 0x32, 0xfa, 0x65, 0x16, 0xd8, 0xb3};
static const uint8_t chiptest_e4836c3b50dd_Y_7[]   = {0x04, 0xc0, 0xf6, 0x5d, 0xa0, 0xd1, 0x19, 0x27, 0xbd, 0xf5, 0xd5, 0x60, 0xc6, 0x9e, 0x1d, 0x7d, 0x93, 0x9a, 0x05, 0xb0, 0xe8, 0x82, 0x91, 0x88, 0x7d, 0x67, 0x9f, 0xca, 0xde, 0xa7, 0x58, 0x10, 0xfb, 0x5c, 0xc1, 0xca, 0x74, 0x94, 0xdb, 0x39, 0xe8, 0x2f, 0xf2, 0xf5, 0x06, 0x65, 0x25, 0x5d, 0x76, 0x17, 0x3e, 0x09, 0x98, 0x6a, 0xb4, 0x67, 0x42, 0xc7, 0x98, 0xa9, 0xa6, 0x84, 0x37, 0xb0, 0x48};
static const uint8_t chiptest_e4836c3b50dd_Z_8[]   = {0x04, 0xbb, 0xfc, 0xe7, 0xdd, 0x7f, 0x27, 0x78, 0x19, 0xc8, 0xda, 0x21, 0x54, 0x4a, 0xfb, 0x79, 0x64, 0x70, 0x55, 0x69, 0xbd, 0xf1, 0x2f, 0xb9, 0x2a, 0xa3, 0x88, 0x05, 0x94, 0x08, 0xd5, 0x00, 0x91, 0xa0, 0xc5, 0xf1, 0xd3, 0x12, 0x7f, 0x56, 0x81, 0x3b, 0x53, 0x37, 0xf9, 0xe4, 0xe6, 0x7e, 0x2c, 0xa6, 0x33, 0x11, 0x7a, 0x4f, 0xbd, 0x55, 0x99, 0x46, 0xab, 0x47, 0x43, 0x56, 0xc4, 0x18, 0x39};
static const uint8_t chiptest_e4836c3b50dd_V_9[]   = {0x04, 0x58, 0xbf, 0x27, 0xc6, 0xbc, 0xa0, 0x11, 0xc9, 0xce, 0x19, 0x30, 0xe8, 0x98, 0x4a, 0x79, 0x7a, 0x34, 0x19, 0x79, 0x7b, 0x93, 0x66, 0x29, 0xa5, 0xa9, 0x37, 0xcf, 0x2f, 0x11, 0xc8, 0xb9, 0x51, 0x4b, 0x82, 0xb9, 0x93, 0xda, 0x8a, 0x46, 0xe6, 0x64, 0xf2, 0x3d, 0xb7, 0xc0, 0x1e, 0xdc, 0x87, 0xfa, 0xa5, 0x30, 0xdb, 0x01, 0xc2, 0xee, 0x40, 0x52, 0x30, 0xb1, 0x89, 0x97, 0xf1, 0x6b, 0x68};
static const uint8_t chiptest_e4836c3b50dd_K_main_10[] = {0x4c, 0x59, 0xe1, 0xcc, 0xf2, 0xcf, 0xb9, 0x61, 0xaa, 0x31, 0xbd, 0x94, 0x34, 0x47, 0x8a, 0x10, 0x89, 0xb5, 0x6c, 0xd1, 0x15, 0x42, 0xf5, 0x3d, 0x35, 0x76, 0xfb, 0x6c, 0x2a, 0x43, 0x8a, 0x29};
static const uint8_t chiptest_e4836c3b50dd_K_confirmP_11[] = {0x87, 0x1a, 0xe3, 0xf7, 0xb7, 0x84, 0x45, 0xe3, 0x44, 0x38, 0xfb, 0x28, 0x45, 0x04, 0x24, 0x02, 0x39, 0x03, 0x1c, 0x39, 0xd8, 0x0a, 0xc2, 0x3e, 0xb5, 0xab, 0x9b, 0xe5, 0xad, 0x6d, 0xb5, 0x8a};
static const uint8_t chiptest_e4836c3b50dd_K_confirmV_12[] = {0xcc, 0xd5, 0x3c, 0x7c, 0x1f, 0xa3, 0x7b, 0x64, 0xa4, 0x62, 0xb4, 0x0d, 0xb8, 0xbe, 0x10, 0x1c, 0xed, 0xcf, 0x83, 0x89, 0x50, 0x16, 0x29, 0x02, 0x05, 0x4e, 0x64, 0x4b, 0x40, 0x0f, 0x16, 0x80};
static const uint8_t chiptest_e4836c3b50dd_K_shared_13[] = {0x0c, 0x5f, 0x8c, 0xcd, 0x14, 0x13, 0x42, 0x3a, 0x54, 0xf6, 0xc1, 0xfb, 0x26, 0xff, 0x01, 0x53, 0x4a, 0x87, 0xf8, 0x93, 0x77, 0x9c, 0x6e, 0x68, 0x66, 0x6d, 0x77, 0x2b, 0xfd, 0x91, 0xf3, 0xe7};
static const uint8_t chiptest_e4836c3b50dd_MAC_confirmP_14[] = {0x92, 0x6c, 0xc7, 0x13, 0x50, 0x4b, 0x9b, 0x4d, 0x76, 0xc9, 0x16, 0x2d, 0xed, 0x04, 0xb5, 0x49, 0x3e, 0x89, 0x10, 0x9f, 0x6d, 0x89, 0x46, 0x2c, 0xd3, 0x3a, 0xdc, 0x46, 0xfd, 0xa2, 0x75, 0x27};
static const uint8_t chiptest_e4836c3b50dd_MAC_confirmV_15[] = {0x97, 0x47, 0xbc, 0xc4, 0xf8, 0xfe, 0x9f, 0x63, 0xde, 0xfe, 0xe5, 0x3a, 0xc9, 0xb0, 0x78, 0x76, 0xd9, 0x07, 0xd5, 0x50, 0x47, 0xe6, 0xff, 0x2d, 0xef, 0x2e, 0x75, 0x29, 0x08, 0x9d, 0x3e, 0x68};

static const struct spake2p_rfc_tv chiptest_e4836c3b50dd_test_vector_16 = {
    .context               = reinterpret_cast<const uint8_t *>("SPAKE2+-P256-SHA256-HKDF-SHA256-HMAC-SHA256 Test Vectors"),
    .context_len           = 56,
    .prover_identity       = reinterpret_cast<const uint8_t *>("client"),
    .prover_identity_len   = 6,
    .verifier_identity     = reinterpret_cast<const uint8_t *>("server"),
    .verifier_identity_len = 6,
    .w0                    = chiptest_e4836c3b50dd_w0_1,
    .w0_len                = 32,
    .w1                    = chiptest_e4836c3b50dd_w1_2,
    .w1_len                = 32,
    .L                     = chiptest_e4836c3b50dd_L_3,
    .L_len                 = 65,
    .x                     = chiptest_e4836c3b50dd_x_4,
    .x_len                 = 32,
    .X                     = chiptest_e4836c3b50dd_X_5,
    .X_len                 = 65,
    .y                     = chiptest_e4836c3b50dd_y_6,
    .y_len                 = 32,
    .Y                     = chiptest_e4836c3b50dd_Y_7,
    .Y_len                 = 65,
    .Z                     = chiptest_e4836c3b50dd_Z_8,
    .Z_len                 = 65,
    .V                     = chiptest_e4836c3b50dd_V_9,
    .V_len                 = 65,
    .K_main                = chiptest_e4836c3b50dd_K_main_10,
    .K_main_len            = 32,
    .K_confirmP            = chiptest_e4836c3b50dd_K_confirmP_11,
    .K_confirmP_len        = 32,
    .K_confirmV            = chiptest_e4836c3b50dd_K_confirmV_12,
    .K_confirmV_len        = 32,
    .K_shared              = chiptest_e4836c3b50dd_K_shared_13,
    .K_shared_len          = 32,
    .MAC_confirmP          = chiptest_e4836c3b50dd_MAC_confirmP_14,
    .MAC_confirmP_len      = 32,
    .MAC_confirmV          = chiptest_e4836c3b50dd_MAC_confirmV_15,
    .MAC_confirmV_len      = 32
};

static const struct spake2p_rfc_tv * rfc_tvs[] = { &chiptest_e4836c3b50dd_test_vector_16,};

} // namespace Crypto
} // namespace chip